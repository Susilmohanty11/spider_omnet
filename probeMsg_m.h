//
// Generated file, do not edit! Created by nedtool 5.4 from probeMsg.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __PROBEMSG_M_H
#define __PROBEMSG_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include <vector>
#include <map>
typedef std::vector<int> IntVector;
typedef std::vector<double> DoubleVector;
typedef std::map<int, double> IntMap;
// }}

/**
 * Class generated from <tt>probeMsg.msg:28</tt> by nedtool.
 * <pre>
 * packet probeMsg
 * {
 *     int pathIndex;
 *     int sender;
 *     int receiver;
 *     bool isReversed = false;
 *     IntVector pathBalances;
 * }
 * </pre>
 */
class probeMsg : public ::omnetpp::cPacket
{
  protected:
    int pathIndex;
    int sender;
    int receiver;
    bool isReversed;
    IntVector pathBalances;

  private:
    void copy(const probeMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const probeMsg&);

  public:
    probeMsg(const char *name=nullptr, short kind=0);
    probeMsg(const probeMsg& other);
    virtual ~probeMsg();
    probeMsg& operator=(const probeMsg& other);
    virtual probeMsg *dup() const override {return new probeMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getPathIndex() const;
    virtual void setPathIndex(int pathIndex);
    virtual int getSender() const;
    virtual void setSender(int sender);
    virtual int getReceiver() const;
    virtual void setReceiver(int receiver);
    virtual bool getIsReversed() const;
    virtual void setIsReversed(bool isReversed);
    virtual IntVector& getPathBalances();
    virtual const IntVector& getPathBalances() const {return const_cast<probeMsg*>(this)->getPathBalances();}
    virtual void setPathBalances(const IntVector& pathBalances);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const probeMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, probeMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __PROBEMSG_M_H

